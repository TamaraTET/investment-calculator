{"ast":null,"code":"var _jsxFileName = \"/Users/tamara/Codes/investment-calculator-app/src/App.js\";\nimport Header from './components/Header/Header';\nimport ResultsTable from './components/ResultsTable/ResultsTable';\nimport UserInput from './components/UserInput/UserInput';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  // const calculateHandler = (userInput) => {\n  // Should be triggered when form is submitted\n  // You might not directly want to bind it to the submit event on the form though...\n\n  //const yearlyData = []; // per-year results\n\n  //let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n  //const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n  //const expectedReturn = +userInput['expected-return'] / 100;\n  //const duration = +userInput['duration'];\n\n  // The below code calculates yearly results (total savings, interest etc)\n  //for (let i = 0; i < duration; i++) {\n  //const yearlyInterest = currentSavings * expectedReturn;\n  //currentSavings += yearlyInterest + yearlyContribution;\n  //yearlyData.push({\n  // feel free to change the shape of the data pushed to the array!\n  //year: i + 1,\n  // yearlyInterest: yearlyInterest,\n  // savingsEndOfYear: currentSavings,\n  //yearlyContribution: yearlyContribution,\n  // });\n  // }\n\n  // do something with yearlyData ...\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserInput, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ResultsTable, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Header","ResultsTable","UserInput","jsxDEV","_jsxDEV","App","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tamara/Codes/investment-calculator-app/src/App.js"],"sourcesContent":["import Header from './components/Header/Header';\nimport ResultsTable from './components/ResultsTable/ResultsTable';\nimport UserInput from './components/UserInput/UserInput';\n\nfunction App() {\n  // const calculateHandler = (userInput) => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    //const yearlyData = []; // per-year results\n\n    //let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    //const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    //const expectedReturn = +userInput['expected-return'] / 100;\n    //const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    //for (let i = 0; i < duration; i++) {\n      //const yearlyInterest = currentSavings * expectedReturn;\n      //currentSavings += yearlyInterest + yearlyContribution;\n      //yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        //year: i + 1,\n       // yearlyInterest: yearlyInterest,\n       // savingsEndOfYear: currentSavings,\n        //yearlyContribution: yearlyContribution,\n     // });\n   // }\n\n    // do something with yearlyData ...\n // };\n\n  return (\n    <div>\n      <Header />\n\n      <UserInput />\n\n      <ResultsTable />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,MAAM,MAAM,4BAA4B;AAC/C,OAAOC,YAAY,MAAM,wCAAwC;AACjE,OAAOC,SAAS,MAAM,kCAAkC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzD,SAASC,GAAGA,CAAA,EAAG;EACb;EACE;EACA;;EAEA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACE;EACA;EACA;EACE;EACA;EACD;EACA;EACC;EACH;EACF;;EAEC;EACH;;EAEC,oBACED,OAAA;IAAAE,QAAA,gBACEF,OAAA,CAACJ,MAAM;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEVN,OAAA,CAACF,SAAS;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEbN,OAAA,CAACH,YAAY;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACb,CAAC;AAEV;AAACC,EAAA,GArCQN,GAAG;AAuCZ,eAAeA,GAAG;AAAC,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}